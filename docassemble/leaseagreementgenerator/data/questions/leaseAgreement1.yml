---
metadata:
 title: Lease Agreement Generator
 description: Generates lease agreements with customizable terms and optional riders
 authors:
   - organization
 revision_date: 2024-01-23
 version: 1.0
 required dependencies: 
   - num2words
   - docassemble.base.util
 document outputs:
   - base lease agreement 
   - good guy guarantee
   - 111 NCP rider (conditional)
   - food & beverage rider (conditional) 
   - broker agreement (conditional)


---
modules: 
 - num2words
 - docassemble.base.util
---
mandatory: true
code: |
 def format_rent_line(year, amount):
   rounded_amount = round(amount, 2)
   amount_in_words = number_to_words(rounded_amount).replace('\u00A0dollars', '').replace('\u00A0cents', '')
   return f"Year\u00A0{year}:\u00A0${amount:,.2f}\u00A0({amount_in_words})\u00A0per\u00A0month\n"

 def create_rent_schedule(lease_term_years, initial_rental_amount, rent_schedule_type, annum_increase=0, custom_schedule=''):
   rent_schedule = []
   
   if rent_schedule_type == "annual_increase":
       current_rent = initial_rental_amount
       for year in range(1, lease_term_years + 1):
           if year == 1:
               rent_schedule.append(format_rent_line(year, initial_rental_amount))
           else:
               increase_rate = annum_increase / 100
               current_rent = current_rent * (1 + increase_rate)
               current_rent = round(current_rent, 2)
               rent_schedule.append(format_rent_line(year, current_rent))
   else:  # custom schedule
       custom_rents = [rent.strip() for rent in custom_schedule.split('\n') if rent.strip()]
       
       if len(custom_rents) < lease_term_years:
           return "Error: Not enough rent values provided for lease term"
       
       for year in range(1, lease_term_years + 1):
           try:
               monthly_rent = float(custom_rents[year-1])
               monthly_rent = round(monthly_rent, 2)
               rent_schedule.append(format_rent_line(year, monthly_rent))
           except ValueError:
               return f"Error: Invalid rent amount provided for year {year}"
   
   formatted_schedule = "\n".join(rent_schedule) + "\n"
   return formatted_schedule
---
code: |
  def format_guarantor_signatures(text):
   if not text:
       return ""
   signatures = [sig.strip() for sig in text.split('\n') if sig.strip()]
   formatted_sigs = []
   for sig in signatures:
       formatted_sigs.append(f"\n\n X______________________ \nBy: {sig}, Date:")
   return "\n".join(formatted_sigs)
---
code: |
 def num_to_month(num):
   months = {
       1: "January", 2: "February", 3: "March",
       4: "April", 5: "May", 6: "June",
       7: "July", 8: "August", 9: "September",
       10: "October", 11: "November", 12: "December"
   }
   return months.get(num, "Invalid month")
---
code: |
  def format_comma_list(text):
     if not text:
         return ""
     items = [item.strip() for item in text.split('\n') if item.strip()]
     if len(items) == 0:
         return ""
     elif len(items) == 1:
         return items[0]
     elif len(items) == 2:
         return f"{items[0]} and {items[1]}"
     else:
         return ", ".join(items[:-1]) + ", and " + items[-1]
---
code: |
 def format_guarantor_list(text):
   if not text:
       return ""
   names = [name.strip() for name in text.split('\n') if name.strip()]
   return "\n".join(f"â€¢ {name}" for name in names)
---
code: |
 def number_to_words(n):
   from num2words import num2words
   words = num2words(n)
   words = words.replace(' ', '\u00A0')
   return words
---
mandatory: True
code: |
 if not defined('user_approves'):
   need(lease_date)
   need(landlord_entity)
   need(tenant_entity)
   need(tenant_dba)
   need(broker_involved_yn)
   need(initial_rental_amount)
   initial_rental_amount = int(initial_rental_amount)
   
   logo_file = floor_plan if floor_plan else None
   if broker_involved_yn:
     need(broker_name)
     need(broker_commission)
     broker_commission_math = float((broker_commission) * (initial_rental_amount))
     broker_commission_formatted = f"${broker_commission_math:,.2f}"
   else:
     broker_name = "N/A"
     broker_commission = 0
     broker_commission_formatted = 0
   
   need(building_c_address)
   need(unit_number)
   need(previous_tenant_yn)
   if previous_tenant_yn:
     need(previous_tenant_name)
   else:
     previous_tenant_name = "N/A"
     
   need(curfew_time_yn)
   if curfew_time_yn:
     need(curfew_time)
     curfew_statement = string("Tenant shall not operate for business in the Premises during the hours from") (curfew_time)
   else:
     curfew_statement = "INTENTIONALLY OMITTED"
     
   need(landlord_work)
   need(lease_term_years)
   lease_term_years = int(lease_term_years)
   lease_term_years_words = number_to_words(lease_term_years)
   
   need(tenant_mailing_address)
   need(tenant_permitted_use)
   need(tenant_security_deposit)
   
   security_deposit_total = tenant_security_deposit * initial_rental_amount
   security_deposit_total_formatted = f"${security_deposit_total:,.2f}"
   initial_rental_amount_formatted = f"${initial_rental_amount:,.2f}"
   tenant_security_deposit_formatted = f"${tenant_security_deposit:,.0f}"

   need(annual_increase_yn)
   if annual_increase_yn:
     need(annum_increase)
     rent_schedule_text = create_rent_schedule(
         lease_term_years=int(lease_term_years),
         initial_rental_amount=initial_rental_amount,
         rent_schedule_type="annual_increase",
         annum_increase=float(annum_increase)
     )
   else:
     need(custom_rent_schedule)
     annum_increase = 0
     rent_schedule_text = create_rent_schedule(
         lease_term_years=int(lease_term_years),
         initial_rental_amount=initial_rental_amount,
         rent_schedule_type="custom",
         custom_schedule=custom_rent_schedule
       )

   need(rent_concession)
   need(tax_year)
   tax_year = int(tax_year)
   need(tenant_share)
   tenant_share = int(tenant_share)
   tenant_share_words = number_to_words(tenant_share)
   need(lease_commencement_date)
   need(guarantors_name)
   guarantor_signatures = format_guarantor_signatures(guarantors_name)

   initial_rental_amount_words = number_to_words(initial_rental_amount)
   rent_concession = int(rent_concession)
   rent_concession_words = number_to_words(rent_concession)
   tax_year_next = (tax_year + 1)
   
   guarantor_bullet_list = format_guarantor_list(guarantors_name)
   guarantor_comma_list = format_comma_list(guarantors_name)

   expiration_year = (lease_commencement_date.year + lease_term_years)
   expiration_day = lease_commencement_date.day
   expiration_month = lease_commencement_date.month
   expiration_month_word = num_to_month(expiration_month)
   
   need(ncp_111_yn)
   need(food_and_beverage_yn)
   
   docs_to_show = [final_document, good_guy]
   if ncp_111_yn:
     docs_to_show.append(ncp_doc)
   if food_and_beverage_yn:
     docs_to_show.append(fb_doc)
   if broker_involved_yn:
     docs_to_show.append(broker_doc)
     
   all_fields_complete = True
---
question: Lease Agreement Information
fields:
 - Date of Lease: lease_date
   datatype: date
 - Landlord Entity Name: landlord_entity
   datatype: text
 - Tenant Entity Name: tenant_entity
   datatype: text
 - Tenant's DBA: tenant_dba
   datatype: text
 - "Broker Involved?": broker_involved_yn
   datatype: yesnoradio
 - Broker Name: broker_name
   datatype: text
   show if: broker_involved_yn
 - Broker Commission (Months): broker_commission
   datatype: number
   show if: broker_involved_yn
 - Building Complete Address: building_c_address
   datatype: text
 - Unit Number: unit_number
   datatype: text
 - Previous Tenant Existed?: previous_tenant_yn
   datatype: yesno
 - Previous Tenant Name: previous_tenant_name
   datatype: text
   show if: previous_tenant_yn
 - Curfew Time Exists?: curfew_time_yn
   datatype: yesno
 - Curfew Time: curfew_time
   datatype: text
   show if: curfew_time_yn
 - Landlord Work Description: landlord_work
   datatype: text
 - Lease Term (Years): lease_term_years
   datatype: number
 - "Annual Percentage Increase?": annual_increase_yn
   datatype: yesnoradio
   help: |
     If NO, then enter a custom rent schedule. 
 - Annual Increase Percentage: annum_increase
   datatype: decimal
   show if: annual_increase_yn
 - Custom Monthly Rent Schedule (one amount per line): custom_rent_schedule
   datatype: area
   show if: 
     variable: annual_increase_yn
     is: False
   help: |
     Enter the monthly rent amount for each year of the lease.
     Example for a 3-year lease:
     5000
     5200
     5500
 - Tenant Mailing Address: tenant_mailing_address
   datatype: text
 - Tenant Permitted Use: tenant_permitted_use
   datatype: area
 - Security Deposit (Months): tenant_security_deposit
   datatype: number
 - Initial Rent Amount ($): initial_rental_amount
   datatype: number
 - Rent Concession (Half-Months): rent_concession
   datatype: number
 - Tax Base Year: tax_year
   datatype: number
 - Tenant Tax Share (%): tenant_share
   datatype: decimal
 - Lease Commencement Date: lease_commencement_date
   datatype: date
 - Guarantor Names (one per line): guarantors_name
   datatype: area
 - Is this Lease for 111 North Central Park Ave?: ncp_111_yn
   datatype: yesnoradio
   help: |
     Select YES if this is a lease for 111 North Central Park Ave
 - Is this Lease for a Restaurant?: food_and_beverage_yn
   datatype: yesnoradio
   help: |
     Select YES if this is a lease for a restaurant
 - Floor Plan: floor_plan
   datatype: file
   help: |
     Please include any relevant images for demise of premises
   accept: |
     "image/jpeg, image/png"
   image upload type: png
   required: false
---
mandatory: True
question: |
 Here is your document.
subquestion: |
 Does it meet your approval?
yesno: user_approves
allow emailing: False
attachment code: |
 docs_to_show
---
attachment:
 name: Lease Agreement
 filename: lease_agreement
 docx template file: Lease_Agreement_3_1.docx
 valid formats:
   - pdf
   - docx
 variable name: final_document
 
---
attachment:
 name: Good Guy Guarantee
 filename: good_guy_guarantee
 docx template file: Good_Guy_Guarantee.docx
 valid formats:
   - pdf
   - docx
 variable name: good_guy

---
attachment:
 name: 111_NCP
 filename: ncp_111_lease
 docx template file: 111NCP_lease_1.docx
 valid formats:
   - pdf
   - docx
 variable name: ncp_doc

---
attachment:
 name: FOOD_AND_BEVERAGE
 filename: FOOD_AND_BEVERAGE
 docx template file: FOOD_AND_BEVERAGE_USE_RIDER_1.docx
 valid formats:
   - pdf
   - docx
 variable name: fb_doc

---
attachment:
 name: broker_agreement
 filename: broker_agreement
 docx template file: Brokerage_agreement_1.docx
 valid formats:
   - pdf
   - docx
 variable name: broker_doc

---
code: |
 if all_fields_complete:
   final_document